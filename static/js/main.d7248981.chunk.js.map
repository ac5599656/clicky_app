{"version":3,"sources":["components/Card.js","components/Wrapper.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","handleClick","id","src","image","alt","name","Wrapper","children","NavBar","score","App","state","cartoons","used","_this","includes","setState","sort","Math","random","forEach","cartoon","concat","Object","toConsumableArray","_this2","this","components_NavBar","components_Wrapper","map","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qjFA+BeA,SA5BF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OACEE,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,KACvCH,UAAU,eACVI,IAAKR,EAAMS,MACXC,IAAKV,EAAMW,KACXJ,GAAIP,EAAMO,UCNLK,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,WCS1BC,EAVA,SAAAd,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeG,GAAG,YAAhC,UACUP,EAAMe,gBC2CLC,6MA1CbC,MAAQ,CACNF,MAAO,EACPG,SAAUA,EACVC,KAAM,MAIRb,YAAc,SAAAC,GACPa,EAAKH,MAAME,KAAKE,SAASd,GAS5Ba,EAAKE,SAAS,CAAEP,MAAO,EAAGI,KAAM,MARhCC,EAAKE,SAAS,CAAEP,MAAOK,EAAKH,MAAMF,MAAQ,IAC1CG,EAASK,KAAK,kBAAMC,KAAKC,SAAW,KACpCP,EAASQ,QAAQ,SAAAC,GACfP,EAAKE,SAAS,CACZH,KAAI,GAAAS,OAAAC,OAAAC,EAAA,EAAAD,CAAMT,EAAKH,MAAME,MAAjB,CAAuBZ,kFAQ1B,IAAAwB,EAAAC,KACP,OACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAD,CAAQlB,MAAOiB,KAAKf,MAAMF,QAC1Bd,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ4B,KAAKf,MAAMC,SAASiB,IAAI,SAAAR,GAAO,OAC9B1B,EAAAC,EAAAC,cAACiC,EAAD,CACE9B,YAAayB,EAAKzB,YAClBC,GAAIoB,EAAQpB,GACZ8B,IAAKV,EAAQpB,GACbI,KAAMgB,EAAQhB,KACdF,MAAOkB,EAAQlB,oBAnCb6B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7248981.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Card = props => (\n  <div>\n    <div className=\"col-md-3 pt-5 p-3\">\n      <div className=\"fix\">\n        <img\n          onClick={() => props.handleClick(props.id)}\n          className=\"card-img-top\"\n          src={props.image}\n          alt={props.name}\n          id={props.id}\n        />\n      </div>\n    </div>\n  </div>\n  // <div className=\"col-md-3\">\n  //   <div className=\"img-container\">\n  //     <img\n  //       onClick={() => console.log(\"HELLO WORLD\")}\n  //       className=\"card-img-top\"\n  //       src={props.image}\n  //       alt={props.name}\n  //       onClick={props.handleClick}\n  //       id={props.id}\n  //     />\n  //   </div>\n  // </div>\n);\n\nexport default Card;\n","import React from \"react\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nconst NavBar = props => (\n  <nav className=\"navbar navbar-expand-lg\">\n    <h3>Clicky Game</h3>\n\n    <h5 className=\"ml-auto mt-2\" id=\"counters\">\n      Score: {props.score}\n    </h5>\n  </nav>\n);\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport cartoons from \"./cartoons.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the cartoons json array\n  state = {\n    score: 0,\n    cartoons: cartoons,\n    used: []\n  };\n\n  // handleIncrement increases this.state.count by 1\n  handleClick = id => {\n    if (!this.state.used.includes(id)) {\n      this.setState({ score: this.state.score + 1 });\n      cartoons.sort(() => Math.random() - 0.5);\n      cartoons.forEach(cartoon => {\n        this.setState({\n          used: [...this.state.used, id]\n        });\n      });\n    } else {\n      this.setState({ score: 0, used: [] });\n    }\n  };\n  // Map over this.state.cartoons and render a Card component for each friend object\n  render() {\n    return (\n      <div>\n        <NavBar score={this.state.score} />\n        <Wrapper>\n          <div className=\"row\">\n            {this.state.cartoons.map(cartoon => (\n              <Card\n                handleClick={this.handleClick}\n                id={cartoon.id}\n                key={cartoon.id}\n                name={cartoon.name}\n                image={cartoon.image}\n              />\n            ))}\n          </div>\n        </Wrapper>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}